// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/payment/payment.dart';
import 'models/product.dart';
import 'models/transaction/transaction.dart';
import 'models/transaction/transaction_line.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3903664865755418506),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(6, 854208606137805738),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3145006513153938832),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2477879775267043338),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1590069151557291440),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7631436938090167418),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7878826235364207706),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 854208606137805738),
            name: 'tva',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8250816634690839412),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(3, 2110130391696795799),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4194154230538990093),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6799843038245719337),
            name: 'transactionDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2110130391696795799),
            name: 'isPaymentConfirmed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 19893120617664781),
            name: 'lines',
            targetId: const obx_int.IdUid(3, 2735234876302347974)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 655632831297276494),
            name: 'payments',
            targetId: const obx_int.IdUid(5, 319029168594019471))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2735234876302347974),
      name: 'TransactionLine',
      lastPropertyId: const obx_int.IdUid(5, 5062604618596839203),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5799466038188551540),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6728411791882589804),
            name: 'itemName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6129764226755753393),
            name: 'quantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8520938700662906179),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5062604618596839203),
            name: 'transactionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3998555411153740361),
            relationTarget: 'Transaction')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4652221415375332005),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(4, 978387410737348747),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2014045289269937078),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6365573190315137780),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5667800059890137017),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 978387410737348747),
            name: 'role',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 319029168594019471),
      name: 'Payment',
      lastPropertyId: const obx_int.IdUid(5, 6736115838862733555),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5094017078609044205),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7840034826170748240),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8697986981020823173),
            name: 'isConfirmed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6736115838862733555),
            name: 'paymentType',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 319029168594019471),
      lastIndexId: const obx_int.IdUid(1, 3998555411153740361),
      lastRelationId: const obx_int.IdUid(2, 655632831297276494),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1719804027107459503],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[0],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.tva);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final tvaParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = Product(
              name: nameParam,
              price: priceParam,
              tva: tvaParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..createdAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[1],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {
              obx_int.RelInfo<Transaction>.toMany(1, object.id): object.lines,
              obx_int.RelInfo<Transaction>.toMany(2, object.id): object.payments
            },
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final transactionDateOffset = fbb.writeString(object.transactionDate);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, transactionDateOffset);
          fbb.addBool(2, object.isPaymentConfirmed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final transactionDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object = Transaction(transactionDate: transactionDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isPaymentConfirmed =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          obx_int.InternalToManyAccess.setRelInfo<Transaction>(object.lines,
              store, obx_int.RelInfo<Transaction>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Transaction>(object.payments,
              store, obx_int.RelInfo<Transaction>.toMany(2, object.id));
          return object;
        }),
    TransactionLine: obx_int.EntityDefinition<TransactionLine>(
        model: _entities[2],
        toOneRelations: (TransactionLine object) => [object.transaction],
        toManyRelations: (TransactionLine object) => {},
        getId: (TransactionLine object) => object.id,
        setId: (TransactionLine object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionLine object, fb.Builder fbb) {
          final itemNameOffset = fbb.writeString(object.itemName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemNameOffset);
          fbb.addInt64(2, object.quantity);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(4, object.transaction.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final itemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = TransactionLine(
              itemName: itemNameParam,
              quantity: quantityParam,
              price: priceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.transaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.transaction.attach(store);
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[3],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, roleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = User(
              id: idParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              role: roleParam);

          return object;
        }),
    Payment: obx_int.EntityDefinition<Payment>(
        model: _entities[4],
        toOneRelations: (Payment object) => [],
        toManyRelations: (Payment object) => {},
        getId: (Payment object) => object.id,
        setId: (Payment object, int id) {
          object.id = id;
        },
        objectToFB: (Payment object, fb.Builder fbb) {
          final paymentTypeOffset = fbb.writeString(object.paymentType);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addBool(3, object.isConfirmed);
          fbb.addOffset(4, paymentTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final paymentTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final isConfirmedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Payment(
              paymentType: paymentTypeParam,
              amount: amountParam,
              isConfirmed: isConfirmedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.id].
  static final id =
      obx.QueryIntegerProperty<Product>(_entities[0].properties[0]);

  /// See [Product.name].
  static final name =
      obx.QueryStringProperty<Product>(_entities[0].properties[1]);

  /// See [Product.description].
  static final description =
      obx.QueryStringProperty<Product>(_entities[0].properties[2]);

  /// See [Product.price].
  static final price =
      obx.QueryDoubleProperty<Product>(_entities[0].properties[3]);

  /// See [Product.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Product>(_entities[0].properties[4]);

  /// See [Product.tva].
  static final tva =
      obx.QueryDoubleProperty<Product>(_entities[0].properties[5]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[1].properties[0]);

  /// See [Transaction.transactionDate].
  static final transactionDate =
      obx.QueryStringProperty<Transaction>(_entities[1].properties[1]);

  /// See [Transaction.isPaymentConfirmed].
  static final isPaymentConfirmed =
      obx.QueryBooleanProperty<Transaction>(_entities[1].properties[2]);

  /// see [Transaction.lines]
  static final lines = obx.QueryRelationToMany<Transaction, TransactionLine>(
      _entities[1].relations[0]);

  /// see [Transaction.payments]
  static final payments =
      obx.QueryRelationToMany<Transaction, Payment>(_entities[1].relations[1]);
}

/// [TransactionLine] entity fields to define ObjectBox queries.
class TransactionLine_ {
  /// See [TransactionLine.id].
  static final id =
      obx.QueryIntegerProperty<TransactionLine>(_entities[2].properties[0]);

  /// See [TransactionLine.itemName].
  static final itemName =
      obx.QueryStringProperty<TransactionLine>(_entities[2].properties[1]);

  /// See [TransactionLine.quantity].
  static final quantity =
      obx.QueryIntegerProperty<TransactionLine>(_entities[2].properties[2]);

  /// See [TransactionLine.price].
  static final price =
      obx.QueryDoubleProperty<TransactionLine>(_entities[2].properties[3]);

  /// See [TransactionLine.transaction].
  static final transaction =
      obx.QueryRelationToOne<TransactionLine, Transaction>(
          _entities[2].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[3].properties[0]);

  /// See [User.firstName].
  static final firstName =
      obx.QueryStringProperty<User>(_entities[3].properties[1]);

  /// See [User.lastName].
  static final lastName =
      obx.QueryStringProperty<User>(_entities[3].properties[2]);

  /// See [User.role].
  static final role = obx.QueryStringProperty<User>(_entities[3].properties[3]);
}

/// [Payment] entity fields to define ObjectBox queries.
class Payment_ {
  /// See [Payment.id].
  static final id =
      obx.QueryIntegerProperty<Payment>(_entities[4].properties[0]);

  /// See [Payment.amount].
  static final amount =
      obx.QueryDoubleProperty<Payment>(_entities[4].properties[1]);

  /// See [Payment.isConfirmed].
  static final isConfirmed =
      obx.QueryBooleanProperty<Payment>(_entities[4].properties[2]);

  /// See [Payment.paymentType].
  static final paymentType =
      obx.QueryStringProperty<Payment>(_entities[4].properties[3]);
}
